<UserControl x:Class="Client.AdministratorControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Client"
             xmlns:models="clr-namespace:Client.Models"
             xmlns:bl="clr-namespace:Client.Business_Logic"
             xmlns:shared="clr-namespace:SharedKernel.Enums;assembly=SharedKernel"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800" Background="AliceBlue"
             xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase">
    <UserControl.DataContext>
        <models:JobFormModel></models:JobFormModel>
    </UserControl.DataContext>
    <UserControl.Resources>
        <Style x:Key="TextBoxStyle" TargetType="TextBox">
            <Setter Property="MinHeight" Value="28"></Setter>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip"
                            Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                        Path=(Validation.Errors)[0].ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="TextBlockStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="18"></Setter>
        </Style>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="ButtonTemplate" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" RenderTransformOrigin="0.5 0.5" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="50" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                                <Setter Property="Button.Effect">
                                    <Setter.Value>
                                        <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3" BlurRadius="5" Opacity="0.5" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="border" Property="RenderTransform">
                                    <Setter.Value>
                                        <ScaleTransform ScaleX="0.9" ScaleY="0.9"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="AddJobTemplate" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FFD7F7EF" Offset="0"/>
                        <GradientStop Color="#FF45C19F" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" RenderTransformOrigin="0.5 0.5" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                                <Setter Property="Button.Effect">
                                    <Setter.Value>
                                        <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3" BlurRadius="5" Opacity="0.5" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="border" Property="RenderTransform">
                                    <Setter.Value>
                                        <ScaleTransform ScaleX="0.9" ScaleY="0.9"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=DataContext.IsValid, RelativeSource={RelativeSource Self}, diag:PresentationTraceSources.TraceLevel=High}" Value="True">
                    <Setter Property="IsEnabled" Value="True"></Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=DataContext.IsValid, RelativeSource={RelativeSource Self}, diag:PresentationTraceSources.TraceLevel=High}" Value="False">
                    <Setter Property="IsEnabled" Value="False"></Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="60px"></RowDefinition>
            <RowDefinition></RowDefinition>
        </Grid.RowDefinitions>
        <Grid.Background>
            <ImageBrush ImageSource="Resources\kissclipart-vintage-car-clipart-antique-car-model-car-a32e78d0c7756d22.png" Stretch="None" Opacity="0.4"></ImageBrush>
        </Grid.Background>
        <DockPanel>
            <Button Name="BackButton" Margin="5" DockPanel.Dock="Left" Grid.Row="0" HorizontalAlignment="left" VerticalAlignment="top" Width="50" Background="Transparent" Height="50" Style="{DynamicResource ButtonTemplate}" Click="BackButton_Click">
                <Image Source="Resources\back-icon.png" Margin="5"></Image>
            </Button>
            <StackPanel>
                <Border BorderBrush="Silver" HorizontalAlignment="Right" BorderThickness="0,0,0,2" Margin="0 8 8 0" Padding="30 0 0 0" >
                    <TextBlock HorizontalAlignment="Right" DockPanel.Dock="Right" FontWeight="Bold" FontSize="30" Text="Administration"></TextBlock>
                </Border>
            </StackPanel>
        </DockPanel>
        <DockPanel Grid.Row="1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="2*"></ColumnDefinition>
                    <ColumnDefinition></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <GroupBox Margin="0 0 0 0" BorderThickness="0">
                    <GroupBox.Header>
                        <StackPanel Orientation="Horizontal">
                            <Image Source="Resources/62959-hammer-and-wrench-icon.png" Width="24" Height="24" />
                            <TextBlock FontWeight="Bold" VerticalAlignment="Center">Job Data</TextBlock>
                        </StackPanel>
                    </GroupBox.Header>
                    <StackPanel Width="240px" >
                        <TextBlock Style="{DynamicResource TextBlockStyle}">Client name:</TextBlock>
                        <Grid>
                            <TextBox Style="{DynamicResource TextBoxStyle}" Padding="5" VerticalContentAlignment="Center" MaxLength="100" Name="ClientName">
                                <TextBox.Text>
                                    <Binding Path="ClientName" ValidatesOnExceptions="True" ValidatesOnNotifyDataErrors="True" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <DataErrorValidationRule/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                            <TextBlock IsHitTestVisible="False" Text="ex.: Dig Bick" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="10,0,0,0" Foreground="DarkGray">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Text, ElementName=ClientName}" Value="">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                        <TextBlock Style="{DynamicResource TextBlockStyle}">Car type:</TextBlock>
                        <Grid>
                            <TextBox Style="{DynamicResource TextBoxStyle}" Padding="5" VerticalContentAlignment="Center" MaxLength="50" Name="CarType">
                                <TextBox.Text>
                                    <Binding Path="CarType" ValidatesOnExceptions="True" ValidatesOnNotifyDataErrors="True" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <DataErrorValidationRule/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                            <TextBlock IsHitTestVisible="False" Text="ex.: Audi, BMW etc." VerticalAlignment="Center" HorizontalAlignment="Left" Margin="10,0,0,0" Foreground="DarkGray">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Text, ElementName=CarType}" Value="">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                        <TextBlock Style="{DynamicResource TextBlockStyle}">Licence plate number:</TextBlock>
                        <Grid>
                            <TextBox Style="{DynamicResource TextBoxStyle}" Padding="5" VerticalContentAlignment="Center" MaxLength="32" Name="LicencePlate">
                                <TextBox.Text>
                                    <Binding Path="LicencePlate" ValidatesOnExceptions="True" ValidatesOnNotifyDataErrors="True" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <DataErrorValidationRule/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                            <TextBlock IsHitTestVisible="False" Text="ex.: ABC 123, CBA 321 etc." VerticalAlignment="Center" HorizontalAlignment="Left" Margin="10,0,0,0" Foreground="DarkGray">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Text, ElementName=LicencePlate}" Value="">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                        <TextBlock Style="{DynamicResource TextBlockStyle}">Problem description:</TextBlock>
                        <Grid>
                            <TextBox Style="{DynamicResource TextBoxStyle}" Height="80px" Padding="5" MaxLength="256" TextWrapping="Wrap" Name="Description">
                                <TextBox.Text>
                                    <Binding Path="Description" ValidatesOnExceptions="True" ValidatesOnNotifyDataErrors="True" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <DataErrorValidationRule/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                        </Grid>
                        <Button Name="AddJob" Click="AddJob_Click" HorizontalContentAlignment="Stretch" BorderThickness="0" Margin="0 10 0 0" Width="150" Style="{DynamicResource AddJobTemplate}" Height="80">
                            <DockPanel Margin="5" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <TextBlock FontSize="24" DockPanel.Dock="Left" >Add job</TextBlock>
                                <Image Source="Resources/Glyph-Add-icon.png" HorizontalAlignment="Right" DockPanel.Dock="Right" Height="32" />
                            </DockPanel>
                        </Button>
                    </StackPanel>
                </GroupBox>
            </Grid>
            <DataGrid Name="ExistingJobs" BorderThickness="0" Background="Transparent" CanUserAddRows="False" CommandManager.PreviewCanExecute="ExistingJobs_PreviewCanExecute"  AutoGenerateColumns="False" CanUserDeleteRows="True" RowEditEnding="ExistingJobs_RowEditEnding" >
                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Refresh" Click="RefreshDataGrid" >
                            <MenuItem.Icon>
                                <Image Source="Resources\Custom-Icon-Design-Flatastic-8-Refresh.ico" />
                            </MenuItem.Icon>
                        </MenuItem>
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Status}" Value="{x:Static shared:JobStatus.InProgress}">
                                <Setter Property="Background" Value="Goldenrod"></Setter>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Status}" Value="{x:Static shared:JobStatus.Done}">
                                <Setter Property="Background" Value="LightGreen"></Setter>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Status}" Value="{x:Static shared:JobStatus.Pending}">
                                <Setter Property="Background" Value="LightGoldenrodYellow"></Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.Columns>
                    <DataGridTextColumn Width="100" Header="Client Name" Binding="{Binding Path=ClientName, UpdateSourceTrigger=PropertyChanged}"/>
                    <DataGridTextColumn Width="75"  Header="Car Type" Binding="{Binding Path=CarType, UpdateSourceTrigger=PropertyChanged}"/>
                    <DataGridTextColumn Width="115" Header="Licence Plate" Binding="{Binding Path=LicencePlate, UpdateSourceTrigger=PropertyChanged}"/>
                    <DataGridTextColumn Width="200" Header="Description" Binding="{Binding Path=Description, UpdateSourceTrigger=PropertyChanged}"/>
                    <DataGridTextColumn Width="110" Header="Date Registered" IsReadOnly="True" Binding="{Binding Path=DateRegistered, UpdateSourceTrigger=PropertyChanged,StringFormat='yyyy-MM-dd HH:mm'}"/>
                    <DataGridTextColumn Width="110" Header="Job Started" IsReadOnly="True" Binding="{Binding Path=JobStarted, UpdateSourceTrigger=PropertyChanged,StringFormat='yyyy-MM-dd HH:mm'}"/>
                    <DataGridTextColumn Width="110" Header="Job Done" IsReadOnly="True" Binding="{Binding Path=JobDone, UpdateSourceTrigger=PropertyChanged,StringFormat='yyyy-MM-dd HH:mm'}"/>
                    <DataGridTextColumn Width="80"  Header="Status" IsReadOnly="True" Binding="{Binding Path=Status, UpdateSourceTrigger=PropertyChanged}"/>
                </DataGrid.Columns>
            </DataGrid>
        </DockPanel>
    </Grid>
</UserControl>
